openapi: 3.0.0
servers:
  - url: '/api'
info:
  version: 1.0.0-oas3
  title: anke-to API

security:
  - application:
      - read
      - write

paths:
  /questionnaires:
    get:
      tags:
        - questionnaire
      description: 与えられた条件を満たす20件以下のアンケートのリストを取得します．
      parameters:
        - name: sort
          in: query
          description: |
            並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at", タイトルの昇順 "title",
            タイトルの降順 "-title", 更新日時が新しい "modified_at", 更新日時が古い
            "-modified_at" )
          schema:
            type: string
        - name: page
          in: query
          description: 何ページ目か (未定義の場合は1ページ目)
          schema:
            type: integer
        - name: nontargeted
          in: query
          description: |
            自分がターゲットになっていないもののみ取得 (true), ターゲットになっているものも含めてすべて取得 (false)
          schema:
            type: boolean
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Questionnaire'

    post:
      tags:
        - questionnaire
      description: 新しいアンケートを作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestionnaire'
      responses:
        '200':
          description: 正常にアンケートを作成できました．作成されたアンケートを返します．
          content:
            application/json:
              schema:
                type: object
                properties:
                  questionnaireID:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: '第1回集会らん☆ぷろ募集アンケート'
                  description:
                    type: string
                    example: '第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！'
                  res_time_limit:
                    type: string
                    format: date-time
                  created_at:
                    type: string
                    format: date-time
                  modified_at:
                    type: string
                    format: date-time
                  res_shared_to:
                    type: string
                    example: 'public'
                  targets:
                    $ref: '#/components/schemas/Users'
                  administrators:
                    $ref: '#/components/schemas/Users'

  '/questionnaires/{questionnaireID}':
    get:
      tags:
        - questionnaire
      description: アンケートの情報を取得します。
      parameters:
        - $ref: '#/components/parameters/questionnaireID'
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionnaireDetails'

    patch:
      tags:
        - questionnaire
      description: アンケートの情報を変更します．
      parameters:
        - $ref: '#/components/parameters/questionnaireID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestionnaire'
      responses:
        '200':
          description: 正常にアンケートを変更できました．

    delete:
      tags:
        - questionnaire
      description: アンケートを削除します．
      parameters:
        - $ref: '#/components/parameters/questionnaireID'
      responses:
        '200':
          description: 正常にアンケートを削除できました．

  '/questionnaires/{questionnaireID}/questions':
    get:
      tags:
        - questionnaire
      # summary:
      description: アンケートに含まれる質問のリストを取得します。
      parameters:
        - $ref: '#/components/parameters/questionnaireID'
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDetails'

  /questions:
    post:
      tags:
        - question
      description: 新しい質問を作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      responses:
        '200':
          description: 正常に質問を作成できました．作成された質問を返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: 正常に作成できませんでした。リクエストが不正です。

  '/questions/{questionID}':
    patch:
      tags:
        - question
      description: 質問を変更します．
      parameters:
        - $ref: '#/components/parameters/questionID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      responses:
        '200':
          description: 正常に質問を変更できました．
        '400':
          description: 正常に変更できませんでした。リクエストが不正です。

    delete:
      tags:
        - question
      description: 質問を削除します．
      parameters:
        - $ref: '#/components/parameters/questionID'
      responses:
        '200':
          description: 正常に質問を削除できました。
        '400':
          description: 正常に削除できませんでした。存在しない質問です。

  /responses/:
    post:
      tags:
        - response
      description: 新しい回答を作成します．
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewResponse'
      responses:
        '200':
          description: 正常に回答を作成できました．作成された回答を返します．
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDetails'

  '/responses/{responseID}':
    get:
      tags:
        - response
      #summary: 未定義
      description: あるresponseIDを持つ回答に含まれる全ての質問に対する自分の回答を取得します
      parameters:
        - $ref: '#/components/parameters/responseID'
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

    patch:
      tags:
        - response
      description: 回答を変更します．
      parameters:
        - $ref: '#/components/parameters/responseID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewResponse'
      responses:
        '200':
          description: 正常に回答を変更できました．
    delete:
      tags:
        - response
      description: 回答を削除します．
      parameters:
        - $ref: '#/components/parameters/responseID'
      responses:
        '200':
          description: 正常に回答を削除できました．

  /users:
    get:
      tags:
        - user
      summary: 未実装
      description: (botおよび除名されたユーザーを除く、全ての) ユーザーのtraQIDのリストを取得します。
      responses:
        '200':
          description: 正常に取得できました．ユーザーの配列を返します．
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/me:
    get:
      tags:
        - user
      description: 自分のユーザー情報を取得します
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  traqID:
                    type: string
                    example: lolico

  /users/me/responses:
    get:
      tags:
        - user
      # summary:
      description: 自分のすべての回答のリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。回答の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseSummary'

  /users/me/responses/{questionnaireID}:
    get:
      tags:
        - user
      # summary:
      parameters:
        - $ref: '#/components/parameters/questionnaireID'
      description: 特定のquestionnaireIdを持つアンケートに対する自分のすべての回答のリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。回答の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseSummary'

  /users/me/targeted:
    get:
      tags:
        - user
      # summary:
      description: 自分が対象になっている アンケートのリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionnaireID:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: '第1回集会らん☆ぷろ募集アンケート'
                    description:
                      type: string
                      example: '第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！'
                    res_time_limit:
                      type: string
                      format: date-time
                    created_at:
                      type: string
                      format: date-time
                    modified_at:
                      type: string
                      format: date-time
                    res_shared_to:
                      type: string
                      example: 'public'
                    responded_at:
                      type: string
                      format: date-time

  /users/me/administrates:
    get:
      tags:
        - user
      description: 自分が管理者になっているアンケートのリストを取得します。
      responses:
        '200':
          description: 正常に取得できました。アンケートの配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionnaireID:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: '第1回集会らん☆ぷろ募集アンケート'
                    description:
                      type: string
                      example: '第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！'
                    res_time_limit:
                      type: string
                      example: '2019-05-10T23:28:10+09:00'
                    created_at:
                      type: string
                      example: '2019-05-01T23:28:10+09:00'
                    modified_at:
                      type: string
                      example: '2019-05-01T23:28:10+09:00'
                    res_shared_to:
                      type: string
                      example: 'public'
                      description: |
                        アンケートの結果を, 運営は見られる ("administrators"), 回答済みの人は見られる ("respondents") 誰でも見られる ("public")
                    all_responded:
                      type: boolean
                      example: true
                      description: |
                        回答必須でない場合、またはすべてのターゲットが回答済みの場合、true を返す。それ以外はfalseを返す。
                    targets:
                      $ref: '#/components/schemas/Users'
                    administrators:
                      $ref: '#/components/schemas/Users'
                    respondents:
                      $ref: '#/components/schemas/Users'

  /groups:
    get:
      tags:
        - group
      summary: 未実装
      description: (全ての) グループのリストを取得します
      responses:
        '200':
          description: 正常に取得できました．グループの配列を返します．
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Group'

  /results/{questionnaireID}:
    get:
      tags:
        - result
      parameters:
        - $ref: '#/components/parameters/questionnaireID'
      description: あるquestionnaireIDを持つアンケートの結果をすべて取得します。
      responses:
        '200':
          description: 正常に取得できました。アンケートの各質問に対する結果の配列を返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    responseID:
                      type: integer
                      example: 1
                    traqID:
                      type: string
                      example: lolico
                    submitted_at:
                      type: string
                      format: date-time
                    modified_at:
                      type: string
                      format: date-time
                    response_body:
                      type: array
                      items:
                        $ref: '#/components/schemas/ResponseBody'
        '403':
          description: 結果を閲覧する権限がありません。

components:
  parameters:
    questionnaireID:
      name: questionnaireID
      in: path
      required: true
      description: |
        アンケートID
      schema:
        type: integer

    questionID:
      name: questionID
      in: path
      required: true
      description: |
        質問ID
      schema:
        type: integer

    responseID:
      name: responseID
      in: path
      required: true
      description: |
        回答ID
      schema:
        type: integer

  schemas:
    Questionnaire:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        title:
          type: string
          example: '第1回集会らん☆ぷろ募集アンケート'
        description:
          type: string
          example: '第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！'
        res_time_limit:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        res_shared_to:
          type: string
          example: 'public'
          description: |
            アンケートの結果を, 運営は見られる ("administrators"), 回答済みの人は見られる ("respondents") 誰でも見られる ("public")
        is_targeted:
          type: boolean
          example: true
          description: |
            自分がターゲットになっているかどうか

    QuestionnaireDetails:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        title:
          type: string
          example: '第1回集会らん☆ぷろ募集アンケート'
        description:
          type: string
          example: '第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！'
        res_time_limit:
          type: string
          example: '2019-05-10T23:28:10+09:00'
        created_at:
          type: string
          example: '2019-05-01T23:28:10+09:00'
        modified_at:
          type: string
          example: '2019-05-01T23:28:10+09:00'
        res_shared_to:
          type: string
          example: 'public'
          description: |
            アンケートの結果を, 運営は見られる ("administrators"), 回答済みの人は見られる ("respondents") 誰でも見られる ("public")
        targets:
          $ref: '#/components/schemas/Users'
        administrators:
          $ref: '#/components/schemas/Users'
        respondents:
          $ref: '#/components/schemas/Users'

    NewQuestionnaire:
      type: object
      properties:
        title:
          type: string
          example: '第1回集会らん☆ぷろ募集アンケート'
        description:
          type: string
          example: '第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！'
        res_time_limit:
          type: string
          format: date-time
        res_shared_to:
          type: string
          example: 'public'
          description: |
            アンケートの結果を, 運営は見られる ("administrators"), 回答済みの人は見られる ("respondents") 誰でも見られる ("public")
        targets:
          $ref: '#/components/schemas/Users'
        administrators:
          $ref: '#/components/schemas/Users'

    Question:
      type: object
      properties:
        questionID:
          type: integer
          example: 1
        questionnaireID:
          type: integer
          example: 1
        page_num:
          type: integer
          example: 1
          description: |
            アンケートの何ページ目の質問か
        question_num:
          type: integer
          example: 1
          description: |
            アンケートの質問のうち、何問目か
        question_type:
          type: string
          example: 'Text'
          description: |
            どのタイプの質問か ("Text", "Number", "MultipleChoice", "Checkbox", "Dropdown", "LinearScale", "Date", "Time")
        body:
          type: string
          example: '質問文'
        is_required:
          type: boolean
          example: true
          description: |
            回答必須かどうか
        options:
          type: array
          items:
            type: string
            example: '選択肢1'
        scale_label_right:
          type: string
          example: 'そう思わない'
        scale_label_left:
          type: string
          example: 'そう思う'
        scale_min:
          type: integer
          example: 1
        scale_max:
          type: integer
          example: 5

    QuestionDetails:
      type: object
      properties:
        questionID:
          type: integer
          example: 1
        page_num:
          type: integer
          example: 1
          description: |
            アンケートの何ページ目の質問か
        question_num:
          type: integer
          example: 1
          description: |
            アンケートの質問のうち、何問目か
        question_type:
          type: string
          example: 'Text'
          description: |
            どのタイプの質問か ("Text", "Number", "MultipleChoice", "Checkbox", "Dropdown", "LinearScale", "Date", "Time")
        body:
          type: string
          example: '質問文'
        is_required:
          type: boolean
          example: true
          description: |
            回答必須かどうか
        created_at:
          type: string
          format: date-time
        options:
          type: array
          items:
            type: string
            example: '選択肢1'
        scale_label_right:
          type: string
          example: 'そう思わない'
        scale_label_left:
          type: string
          example: 'そう思う'
        scale_min:
          type: integer
          example: 1
        scale_max:
          type: integer
          example: 5

    NewQuestion:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        page_num:
          type: integer
          example: 1
          description: |
            アンケートの何ページ目の質問か
        question_num:
          type: integer
          example: 1
          description: |
            アンケートの質問のうち、何問目か
        question_type:
          type: string
          example: 'Text'
          description: |
            どのタイプの質問か ("Text", "Number", "MultipleChoice", "Checkbox", "Dropdown", "LinearScale", "Date", "Time")
        body:
          type: string
          example: '質問文'
        is_required:
          type: boolean
          example: true
          description: |
            回答必須かどうか
        options:
          type: array
          items:
            type: string
            example: '選択肢1'
        scale_label_right:
          type: string
          example: 'そう思わない'
        scale_label_left:
          type: string
          example: 'そう思う'
        scale_min:
          type: integer
          example: 1
        scale_max:
          type: integer
          example: 5

    Response:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        submitted_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        body:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBody'

    ResponseDetails:
      type: object
      properties:
        responseID:
          type: integer
          example: 1
        questionnaireID:
          type: integer
          example: 1
        submitted_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        body:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBody'

    ResponseSummary:
      type: object
      properties:
        responseID:
          type: integer
          example: 1
        questionnaireID:
          type: integer
          example: 1
        questionnaire_title:
          type: string
          example: '第1回集会らん☆ぷろ募集アンケート'
        res_time_limit:
          type: string
          format: date-time
        submitted_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time

    NewResponse:
      type: object
      properties:
        questionnaireID:
          type: integer
          example: 1
        submitted_at:
          type: string
          format: date-time
        body:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBody'

    ResponseBody:
      type: object
      properties:
        questionID:
          type: integer
          example: 1
        question_type:
          type: string
          example: 'Text'
        response:
          type: string
          example: 'リマインダーBOTを作った話'
        option_response:
          type: array
          items:
            type: string
            example: '選択肢1'

    Users:
      type: array
      items:
        type: string
        example: lolico

    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        traqID:
          type: string
          example: lolico
        displayName:
          type: string
          example: ロリ子
        iconFileId:
          type: string
          format: uuid
        twitterId:
          type: string
          example: trapyojo

    Group:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
        name:
          type: string
          example: '17B'
        description:
          type: string
          example: '2017年度入学学部生'
        adminUser:
          type: string
          example: lolico
        members:
          type: array
          items:
            $ref: '#/components/schemas/Users'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  securitySchemes:
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources
